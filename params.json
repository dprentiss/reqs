{"name":"Reqs","tagline":"Requirements Engineering Query System","body":"Requirements Engineering Query System\r\n====\r\n\r\nReqs is a proof-of-concept application that demonstrates the ability of graph-based databases to model and query complex entity-relationship concepts. In this case, an embedded database based on Neo4j is used to represent Stakeholders, Concerns, and Viewpoints as described in IEEE 1471 standard describing the architecture of a software-intensive system. \r\n\r\nThe challenge presented by this task is to capture and effectively traverse the many to many relationships between the three entities. For this initial version of Reqs, the user is presented with a graph-based visual representation of the Stakeholders, Concerns, and Viewpoints in a hypothetical architecture description. The user can graphically select one or more entities and the system responds by highlighting the entities that are related to it.  \r\n\r\n``` java\r\n    public Iterable<Relationship> getRelationships() {\r\n        TraversalDescription traversal = Traversal.description()\r\n            .breadthFirst()\r\n            .evaluator(new Evaluator() {\r\n                @Override\r\n                public Evaluation evaluate(final Path path) {\r\n                    if (path.length() == 0) {\r\n                        return Evaluation.EXCLUDE_AND_CONTINUE;\r\n                    }\r\n                    boolean isOutgoingIS_MEMBER = (\r\n                        path.lastRelationship().getEndNode() == \r\n                        path.endNode() &&\r\n                        (path.lastRelationship()\r\n                        .isType(ReqsDb.RelTypes.IS_MEMBER)));\r\n                    boolean isRelTypeUnique = true;\r\n                    Iterator<Relationship> i = \r\n                path.reverseRelationships().iterator();\r\n                    i.next();\r\n                    while (i.hasNext()) {\r\n                        if (i.next().isType(path.lastRelationship()\r\n                                .getType())) {\r\n                            isRelTypeUnique = false;\r\n                            break;\r\n                        }\r\n                    }\r\n                    boolean included = isOutgoingIS_MEMBER || isRelTypeUnique;\r\n                    boolean continued = included;\r\n                    return Evaluation.of(included, continued);\r\n                }\r\n            });\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}